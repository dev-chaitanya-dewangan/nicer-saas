{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nNicer SaaS is a production-ready SaaS platform that transforms natural language descriptions into fully designed, functional Notion workspaces using AI. The application allows users to describe their desired workspace through a conversational chat interface and generates sophisticated Notion dashboards with advanced features like formulas, rollups, relations, and multiple view types. The platform includes subscription management with Stripe, template libraries, and enterprise-grade workspace generation capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent design\n- **State Management**: TanStack React Query for server state management\n- **Routing**: Wouter for client-side routing\n- **Authentication**: Integrated with Replit Auth for OAuth-based user authentication\n- **UI Components**: Radix UI primitives with custom styling via Tailwind CSS\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured route handlers\n- **Authentication**: Replit Auth integration with session-based authentication\n- **Request Handling**: Express middleware for logging, JSON parsing, and error handling\n\n## Data Storage\n- **Database**: PostgreSQL using Neon serverless database\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema**: Shared schema definitions between client and server\n- **Session Storage**: PostgreSQL-based session store for authentication\n- **Migrations**: Drizzle Kit for database schema management\n\n## AI Integration\n- **AI Provider**: Google Gemini AI for workspace generation\n- **Workspace Generation**: Structured prompts to generate complex Notion workspace specifications\n- **Chat Interface**: Conversational AI for iterative workspace refinement\n- **Template System**: Pre-built templates for common use cases\n\n## External Service Integrations\n- **Notion API**: Direct integration for workspace deployment to user accounts\n- **OAuth Authentication**: Notion OAuth for secure account connection\n- **Stripe Payments**: Subscription management and billing\n- **Replit Connectors**: Managed OAuth connections for external services\n\n## Payment and Subscription System\n- **Payment Processor**: Stripe with React Stripe.js integration\n- **Subscription Tiers**: Free, Pro, and Enterprise plans with usage-based quotas\n- **Usage Tracking**: Monthly workspace generation limits with automatic resets\n- **Billing Management**: Customer portal integration for subscription management\n\n## Security and Authentication\n- **User Management**: Replit Auth with support for Google, GitHub, and email authentication\n- **Session Management**: Secure session storage with PostgreSQL backend\n- **API Security**: Middleware-based authentication checks for protected routes\n- **Environment Variables**: Secure configuration management for API keys and secrets\n\n## Development and Deployment\n- **Build System**: Vite for frontend bundling, esbuild for server compilation\n- **Development Environment**: Hot module replacement with Vite dev server\n- **Type Safety**: Full TypeScript coverage across frontend, backend, and shared code\n- **Code Organization**: Monorepo structure with shared schemas and utilities\n\n# External Dependencies\n\n## Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth service for user management\n- **Hosting**: Replit platform with integrated deployment\n\n## AI and Content Generation\n- **Google Gemini**: AI model for natural language processing and workspace generation\n- **Notion API**: Workspace deployment and integration services\n\n## Payment Processing\n- **Stripe**: Payment processing, subscription management, and billing\n- **Stripe Webhooks**: Real-time subscription status updates\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **Drizzle**: Database ORM and migration tool\n- **TanStack Query**: Server state management and caching\n- **Radix UI**: Accessible component primitives\n\n## UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework\n- **shadcn/ui**: Pre-built component library\n- **Lucide React**: Icon library for consistent iconography","size_bytes":4422},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          '0%, 100%': {\n            opacity: '1',\n          },\n          '50%': {\n            opacity: '0.5',\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse\": \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      boxShadow: {\n        'focus': '0 0 0 2px var(--ring)',\n      }\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3092},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/notionClient.ts":{"content":"import { Client } from '@notionhq/client';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=notion',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('Notion not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableNotionClient() {\n  const accessToken = await getAccessToken();\n  return new Client({ auth: accessToken });\n}\n","size_bytes":1512},"server/openai.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\n// Using Gemini AI for workspace generation with free API key\nconst genAI = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport interface NotionWorkspaceSpec {\n  title: string;\n  description: string;\n  databases: NotionDatabase[];\n  pages: NotionPage[];\n  theme: string;\n  layout: string;\n}\n\nexport interface NotionDatabase {\n  name: string;\n  description: string;\n  properties: NotionProperty[];\n  views: NotionView[];\n  relations: NotionRelation[];\n  sampleData: any[];\n}\n\nexport interface NotionProperty {\n  name: string;\n  type: string;\n  config?: any;\n}\n\nexport interface NotionView {\n  name: string;\n  type: string;\n  filters?: any[];\n  sorts?: any[];\n  layout?: string;\n}\n\nexport interface NotionRelation {\n  property: string;\n  relatedDatabase: string;\n  type: string;\n}\n\nexport interface NotionPage {\n  title: string;\n  content: string;\n  type: string;\n}\n\nexport async function generateNotionWorkspace(\n  prompt: string,\n  theme: string = \"professional\"\n): Promise<NotionWorkspaceSpec> {\n  try {\n    const systemPrompt = `You are an expert Notion workspace designer. Generate a complete, production-ready Notion workspace specification based on the user's requirements.\n\nIMPORTANT GUIDELINES:\n- Create sophisticated, enterprise-grade workspaces with advanced features\n- Include realistic property types: title, rich_text, select, multi_select, date, checkbox, number, formula, rollup, relation, people, status\n- Generate meaningful formulas and rollups that add business value\n- Create multiple view types: table, board, calendar, gallery, list, timeline\n- Establish proper database relationships (one-to-one, one-to-many, many-to-many)\n- Include 5-10 realistic sample data entries per database\n- Apply the specified theme: ${theme}\n- Ensure all sample data is realistic and contextual (no lorem ipsum)\n\nTHEMES:\n- professional: Clean, corporate colors, formal structure\n- pastel: Soft, muted colors, gentle aesthetics\n- dark: Dark backgrounds, high contrast\n- fun: Bright colors, playful elements\n- light: Bright, minimal, clean\n- cheerful: Warm, inviting colors\n- loving: Soft pinks and warm tones\n- soft: Gentle, rounded aesthetics\n- rough: Bold, industrial design\n\nRespond with valid JSON matching the NotionWorkspaceSpec interface.`;\n\n    const response = await genAI.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: prompt,\n    });\n\n    const result = JSON.parse(response.text || \"{}\");\n    return result as NotionWorkspaceSpec;\n  } catch (error) {\n    console.error(\"Error generating workspace:\", error);\n    throw new Error(\"Failed to generate Notion workspace specification\");\n  }\n}\n\nexport async function refineWorkspaceSpec(\n  currentSpec: NotionWorkspaceSpec,\n  refinementPrompt: string\n): Promise<NotionWorkspaceSpec> {\n  try {\n    const systemPrompt = `You are refining an existing Notion workspace specification. Make the requested changes while maintaining the overall structure and quality.\n\nCurrent workspace specification:\n${JSON.stringify(currentSpec, null, 2)}\n\nApply the following refinements and return the updated specification as valid JSON:`;\n\n    const response = await genAI.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n      },\n      contents: refinementPrompt,\n    });\n\n    const result = JSON.parse(response.text || \"{}\");\n    return result as NotionWorkspaceSpec;\n  } catch (error) {\n    console.error(\"Error refining workspace:\", error);\n    throw new Error(\"Failed to refine workspace specification\");\n  }\n}\n\nexport async function generateChatResponse(\n  messages: any[],\n  context?: any\n): Promise<string> {\n  try {\n    const systemPrompt = `You are an AI assistant for Nicer SaaS, a platform that creates Notion workspaces from natural language.\n\nYour role:\n- Help users describe their workspace requirements clearly\n- Suggest improvements and additional features\n- Explain Notion concepts and capabilities\n- Guide users through the workspace creation process\n- Be encouraging and helpful\n\nKeep responses concise but informative. Focus on understanding the user's needs and helping them create the best possible workspace.`;\n\n    const response = await genAI.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: messages.map(msg => `${msg.role}: ${msg.content}`).join('\\n'),\n    });\n\n    return response.text || \"\";\n  } catch (error) {\n    console.error(\"Error generating chat response:\", error);\n    throw new Error(\"Failed to generate chat response\");\n  }\n}\n","size_bytes":4809},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { getUncachableNotionClient } from \"./notionClient\";\nimport { generateNotionWorkspace, refineWorkspaceSpec, generateChatResponse } from \"./openai\";\nimport { insertWorkspaceSchema, insertConversationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Initialize Stripe\nif (!process.env.STRIPE_SECRET_KEY) {\n  console.warn('STRIPE_SECRET_KEY not provided - payment features will be disabled');\n}\n\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-08-27.basil\",\n}) : null;\n\n// Get Notion user information\nasync function getNotionUserInfo(notion: any) {\n  try {\n    const user = await notion.users.me();\n    return {\n      email: user.person?.email || user.bot?.owner?.user?.person?.email || \"Unknown\",\n      name: user.name || \"Unknown User\",\n      id: user.id\n    };\n  } catch (error) {\n    console.error(\"Error getting Notion user info:\", error);\n    return { email: \"Unknown\", name: \"Unknown User\", id: \"unknown\" };\n  }\n}\n\n// Notion workspace deployment function\nasync function deployWorkspaceToNotion(notion: any, workspaceData: any, userInfo?: any): Promise<{ url: string; notionUser: any }> {\n  try {\n    // Create a main workspace page\n    const parentPage = await notion.pages.create({\n      parent: {\n        type: \"page_id\",\n        page_id: process.env.NOTION_PAGE_ID || await getUserNotionPageId(notion)\n      },\n      properties: {\n        title: {\n          title: [\n            {\n              text: {\n                content: workspaceData.title || \"Generated Workspace\"\n              }\n            }\n          ]\n        }\n      },\n      children: [\n        {\n          object: \"block\",\n          type: \"heading_1\",\n          heading_1: {\n            rich_text: [\n              {\n                type: \"text\",\n                text: {\n                  content: workspaceData.title || \"Generated Workspace\"\n                }\n              }\n            ]\n          }\n        },\n        {\n          object: \"block\",\n          type: \"paragraph\",\n          paragraph: {\n            rich_text: [\n              {\n                type: \"text\",\n                text: {\n                  content: workspaceData.description || \"AI-generated workspace created with Nicer SaaS\"\n                }\n              }\n            ]\n          }\n        }\n      ]\n    });\n\n    // Create databases from the workspace data\n    if (workspaceData.databases && Array.isArray(workspaceData.databases)) {\n      // Create databases sequentially to avoid Notion API conflicts\n      for (const db of workspaceData.databases) {\n        try {\n          // Transform properties to Notion format\n          const notionProperties: any = {};\n          \n          if (db.properties && Array.isArray(db.properties)) {\n            db.properties.forEach((prop: any) => {\n              const propName = prop.name || prop.title || \"Untitled\";\n              switch (prop.type) {\n                case \"text\":\n                case \"title\":\n                  notionProperties[propName] = { title: {} };\n                  break;\n                case \"number\":\n                  notionProperties[propName] = { number: { format: \"number\" } };\n                  break;\n                case \"select\":\n                  notionProperties[propName] = { \n                    select: { \n                      options: (prop.options || []).map((opt: any) => ({\n                        name: opt.name || opt,\n                        color: opt.color || \"default\"\n                      }))\n                    }\n                  };\n                  break;\n                case \"multiselect\":\n                case \"multi_select\":\n                  notionProperties[propName] = { \n                    multi_select: { \n                      options: (prop.options || []).map((opt: any) => ({\n                        name: opt.name || opt,\n                        color: opt.color || \"default\"\n                      }))\n                    }\n                  };\n                  break;\n                case \"date\":\n                  notionProperties[propName] = { date: {} };\n                  break;\n                case \"checkbox\":\n                  notionProperties[propName] = { checkbox: {} };\n                  break;\n                case \"url\":\n                  notionProperties[propName] = { url: {} };\n                  break;\n                case \"email\":\n                  notionProperties[propName] = { email: {} };\n                  break;\n                case \"phone\":\n                  notionProperties[propName] = { phone_number: {} };\n                  break;\n                case \"formula\":\n                  notionProperties[propName] = { \n                    formula: { expression: prop.formula || \"1\" }\n                  };\n                  break;\n                case \"relation\":\n                  // Skip relations for now as they require target database\n                  break;\n                default:\n                  notionProperties[propName] = { rich_text: {} };\n              }\n            });\n          }\n\n          // Ensure at least one property exists (Notion requirement)\n          if (Object.keys(notionProperties).length === 0) {\n            notionProperties[\"Name\"] = { title: {} };\n          }\n\n          await notion.databases.create({\n            parent: {\n              type: \"page_id\",\n              page_id: parentPage.id\n            },\n            title: [\n              {\n                type: \"text\",\n                text: {\n                  content: db.title || db.name || \"Database\"\n                }\n              }\n            ],\n            properties: notionProperties\n          });\n\n          // Small delay to prevent rate limiting\n          await new Promise(resolve => setTimeout(resolve, 500));\n        } catch (dbError) {\n          console.error(`Error creating database \"${db.title || db.name}\":`, dbError);\n          // Continue with other databases even if one fails\n        }\n      }\n    }\n\n    // Get Notion user information\n    const notionUser = userInfo || await getNotionUserInfo(notion);\n    console.log(`Workspace deployed to Notion account: ${notionUser.email} (${notionUser.name})`);\n    \n    return { url: parentPage.url, notionUser };\n  } catch (error) {\n    console.error(\"Error deploying to Notion:\", error);\n    throw new Error(`Failed to deploy workspace to Notion: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}\n\n// Helper function to get user's default Notion page ID\nasync function getUserNotionPageId(notion: any): Promise<string> {\n  try {\n    const response = await notion.search({\n      filter: {\n        value: \"page\",\n        property: \"object\"\n      },\n      sort: {\n        direction: \"descending\",\n        timestamp: \"last_edited_time\"\n      },\n      page_size: 1\n    });\n    \n    if (response.results && response.results.length > 0) {\n      return response.results[0].id;\n    }\n    \n    throw new Error(\"No accessible pages found in Notion workspace\");\n  } catch (error) {\n    throw new Error(\"Could not find a suitable parent page in Notion\");\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Workspace routes\n  app.get('/api/workspaces', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const workspaces = await storage.getUserWorkspaces(userId);\n      res.json(workspaces);\n    } catch (error) {\n      console.error(\"Error fetching workspaces:\", error);\n      res.status(500).json({ message: \"Failed to fetch workspaces\" });\n    }\n  });\n\n  app.post('/api/workspaces', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check usage limits\n      if ((user.monthlyUsage || 0) >= (user.usageLimit || 3)) {\n        return res.status(403).json({ \n          message: \"Monthly usage limit reached. Please upgrade your plan.\",\n          usageLimit: user.usageLimit || 3,\n          currentUsage: user.monthlyUsage || 0\n        });\n      }\n\n      const validatedData = insertWorkspaceSchema.parse({\n        ...req.body,\n        userId,\n        status: \"generating\"\n      });\n\n      const workspace = await storage.createWorkspace(validatedData);\n\n      // Generate AI workspace specification\n      try {\n        const aiResponse = await generateNotionWorkspace(\n          validatedData.prompt,\n          validatedData.theme || \"professional\"\n        );\n\n        const updatedWorkspace = await storage.updateWorkspace(workspace.id, {\n          aiResponse,\n          status: \"completed\"\n        });\n\n        // Increment user usage\n        await storage.updateUserUsage(userId, 1);\n\n        res.json(updatedWorkspace);\n      } catch (aiError) {\n        console.error(\"AI generation error:\", aiError);\n        await storage.updateWorkspace(workspace.id, {\n          status: \"failed\"\n        });\n        res.status(500).json({ message: \"Failed to generate workspace specification\" });\n      }\n    } catch (error) {\n      console.error(\"Error creating workspace:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create workspace\" });\n      }\n    }\n  });\n\n  app.get('/api/workspaces/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const workspace = await storage.getWorkspace(req.params.id);\n      \n      if (!workspace) {\n        return res.status(404).json({ message: \"Workspace not found\" });\n      }\n\n      if (workspace.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(workspace);\n    } catch (error) {\n      console.error(\"Error fetching workspace:\", error);\n      res.status(500).json({ message: \"Failed to fetch workspace\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/deploy', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const workspace = await storage.getWorkspace(req.params.id);\n      \n      if (!workspace) {\n        return res.status(404).json({ message: \"Workspace not found\" });\n      }\n\n      if (workspace.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!workspace.aiResponse) {\n        return res.status(400).json({ message: \"Workspace specification not ready\" });\n      }\n\n      const notion = await getUncachableNotionClient();\n      \n      // Parse the AI-generated workspace data and deploy to Notion\n      let workspaceData;\n      try {\n        workspaceData = typeof workspace.aiResponse === 'string' \n          ? JSON.parse(workspace.aiResponse)\n          : workspace.aiResponse;\n      } catch (error) {\n        console.error(\"Error parsing workspace data:\", error);\n        return res.status(400).json({ message: \"Invalid workspace data format\" });\n      }\n      \n      // Get Notion user info first for logging and response\n      const notionUser = await getNotionUserInfo(notion);\n      console.log(`Deploying workspace \"${workspaceData.title || 'Untitled'}\" to Notion account: ${notionUser.email} (${notionUser.name})`);\n      \n      const deployResult = await deployWorkspaceToNotion(notion, workspaceData, notionUser);\n      \n      const updatedWorkspace = await storage.updateWorkspace(workspace.id, {\n        status: \"deployed\",\n        notionPageId: deployResult.url // Store the Notion page URL\n      });\n\n      // Include Notion user info in response for frontend display\n      res.json({ ...updatedWorkspace, notionUser: deployResult.notionUser });\n    } catch (error) {\n      console.error(\"Error deploying workspace:\", error);\n      res.status(500).json({ message: \"Failed to deploy workspace to Notion\" });\n    }\n  });\n\n  app.post('/api/workspaces/:id/refine', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { refinementPrompt } = req.body;\n      const workspace = await storage.getWorkspace(req.params.id);\n      \n      if (!workspace) {\n        return res.status(404).json({ message: \"Workspace not found\" });\n      }\n\n      if (workspace.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!workspace.aiResponse) {\n        return res.status(400).json({ message: \"No workspace specification to refine\" });\n      }\n\n      const refinedSpec = await refineWorkspaceSpec(\n        workspace.aiResponse as any,\n        refinementPrompt\n      );\n\n      const updatedWorkspace = await storage.updateWorkspace(workspace.id, {\n        aiResponse: refinedSpec,\n        status: \"completed\"\n      });\n\n      res.json(updatedWorkspace);\n    } catch (error) {\n      console.error(\"Error refining workspace:\", error);\n      res.status(500).json({ message: \"Failed to refine workspace\" });\n    }\n  });\n\n  // Initialize templates if none exist\n  const initializeTemplates = async () => {\n    try {\n      const existingTemplates = await storage.getTemplates();\n      if (existingTemplates.length === 0) {\n        const defaultTemplates = [\n          {\n            title: \"SaaS CRM System\",\n            description: \"Complete customer relationship management with lead tracking, deal pipeline, and revenue analytics.\",\n            category: \"business\",\n            prompt: \"Create a comprehensive SaaS CRM system with lead tracking, deal pipeline management, revenue analytics, churn rate calculations, and customer communication logs.\",\n            tags: [\"Leads Database\", \"Deal Pipeline\", \"Analytics\"],\n            preview: {\n              databases: 3,\n              properties: 25,\n              views: 8\n            },\n            isPublic: true,\n            usageCount: 0\n          },\n          {\n            title: \"Project Management Hub\",\n            description: \"Task boards, timelines, resource allocation, and team coordination in one workspace.\",\n            category: \"productivity\",\n            prompt: \"Build a project management workspace with task boards, timeline views, resource allocation, team coordination, milestone tracking, and progress reporting.\",\n            tags: [\"Kanban Boards\", \"Timeline\", \"Resources\"],\n            preview: {\n              databases: 4,\n              properties: 20,\n              views: 6\n            },\n            isPublic: true,\n            usageCount: 0\n          },\n          {\n            title: \"Content Calendar\",\n            description: \"Multi-platform content planning with collaboration tools and performance analytics.\",\n            category: \"marketing\",\n            prompt: \"Create a content calendar workspace for multi-platform content planning, collaboration tools, publishing schedules, performance analytics, and content ideation.\",\n            tags: [\"Multi-Platform\", \"Collaboration\", \"Analytics\"],\n            preview: {\n              databases: 3,\n              properties: 18,\n              views: 5\n            },\n            isPublic: true,\n            usageCount: 0\n          },\n          {\n            title: \"Life Organization System\",\n            description: \"Habit tracking, goal management, and personal productivity system for life organization.\",\n            category: \"personal\",\n            prompt: \"Design a personal life organization system with habit tracking, goal management, daily journaling, mood tracking, and personal productivity metrics.\",\n            tags: [\"Habit Tracker\", \"Goals\", \"Journal\"],\n            preview: {\n              databases: 4,\n              properties: 22,\n              views: 7\n            },\n            isPublic: true,\n            usageCount: 0\n          },\n          {\n            title: \"E-commerce Operations\",\n            description: \"Product catalog, order management, inventory tracking, and customer support system.\",\n            category: \"business\",\n            prompt: \"Build an e-commerce operations workspace with product catalog, order management, inventory tracking, customer support tickets, and sales analytics.\",\n            tags: [\"Products\", \"Orders\", \"Inventory\"],\n            preview: {\n              databases: 5,\n              properties: 30,\n              views: 10\n            },\n            isPublic: true,\n            usageCount: 0\n          }\n        ];\n        \n        for (const template of defaultTemplates) {\n          await storage.createTemplate(template);\n        }\n        console.log('Initialized default templates');\n      }\n    } catch (error) {\n      console.error('Error initializing templates:', error);\n    }\n  };\n  \n  // Initialize templates on startup\n  await initializeTemplates();\n\n  // Template routes\n  app.get('/api/templates', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const templates = category \n        ? await storage.getTemplatesByCategory(category as string)\n        : await storage.getTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.get('/api/templates/:id', async (req, res) => {\n    try {\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error(\"Error fetching template:\", error);\n      res.status(500).json({ message: \"Failed to fetch template\" });\n    }\n  });\n\n  app.post('/api/templates/:id/use', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const templateId = req.params.id;\n      \n      // Handle both database templates and featured templates\n      let template;\n      let prompt;\n      let title;\n      let description;\n      \n      if (templateId.startsWith('featured-')) {\n        // Handle featured templates with hardcoded data\n        const featuredTemplates = {\n          'featured-crm': {\n            title: 'SaaS CRM System',\n            description: 'Complete customer relationship management with lead tracking, deal pipeline, and revenue analytics.',\n            prompt: 'Create a comprehensive SaaS CRM system with lead tracking, deal pipeline management, revenue analytics, churn rate calculations, and customer communication logs.'\n          },\n          'featured-project': {\n            title: 'Project Management Hub', \n            description: 'Task boards, timelines, resource allocation, and team coordination in one workspace.',\n            prompt: 'Build a project management workspace with task boards, timeline views, resource allocation, team coordination, milestone tracking, and progress reporting.'\n          },\n          'featured-content': {\n            title: 'Content Calendar',\n            description: 'Multi-platform content planning with collaboration tools and performance analytics.',\n            prompt: 'Create a content calendar workspace for multi-platform content planning, collaboration tools, publishing schedules, performance analytics, and content ideation.'\n          },\n          'featured-personal': {\n            title: 'Life Organization System',\n            description: 'Habit tracking, goal management, and personal productivity system for life organization.',\n            prompt: 'Design a personal life organization system with habit tracking, goal management, daily journaling, mood tracking, and personal productivity metrics.'\n          },\n          'featured-ecommerce': {\n            title: 'E-commerce Operations',\n            description: 'Product catalog, order management, inventory tracking, and customer support system.',\n            prompt: 'Build an e-commerce operations workspace with product catalog, order management, inventory tracking, customer support tickets, and sales analytics.'\n          }\n        };\n        \n        const featuredTemplate = featuredTemplates[templateId as keyof typeof featuredTemplates];\n        if (!featuredTemplate) {\n          return res.status(404).json({ message: \"Featured template not found\" });\n        }\n        \n        title = featuredTemplate.title;\n        description = featuredTemplate.description;\n        prompt = featuredTemplate.prompt;\n      } else {\n        // Handle database templates\n        template = await storage.getTemplate(templateId);\n        if (!template) {\n          return res.status(404).json({ message: \"Template not found\" });\n        }\n        title = template.title;\n        description = template.description;\n        prompt = template.prompt;\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check usage limits\n      if ((user.monthlyUsage || 0) >= (user.usageLimit || 3)) {\n        return res.status(403).json({ \n          message: \"Monthly usage limit reached. Please upgrade your plan.\",\n          usageLimit: user.usageLimit || 3,\n          currentUsage: user.monthlyUsage || 0\n        });\n      }\n\n      // Create workspace from template\n      const workspace = await storage.createWorkspace({\n        userId,\n        title,\n        description,\n        prompt,\n        theme: req.body.theme || \"professional\",\n        templateId: templateId.startsWith('featured-') ? undefined : templateId,\n        status: \"generating\"\n      });\n\n      // Generate AI response\n      try {\n        const aiResponse = await generateNotionWorkspace(\n          prompt,\n          req.body.theme || \"professional\"\n        );\n\n        const updatedWorkspace = await storage.updateWorkspace(workspace.id, {\n          aiResponse,\n          status: \"completed\"\n        });\n\n        // Increment template usage only for database templates\n        if (template) {\n          await storage.incrementTemplateUsage(template.id);\n        }\n        \n        await storage.updateUserUsage(userId, 1);\n\n        res.json(updatedWorkspace);\n      } catch (aiError) {\n        console.error(\"AI generation error:\", aiError);\n        await storage.updateWorkspace(workspace.id, {\n          status: \"failed\"\n        });\n        res.status(500).json({ message: \"Failed to generate workspace from template\" });\n      }\n    } catch (error) {\n      console.error(\"Error using template:\", error);\n      res.status(500).json({ message: \"Failed to use template\" });\n    }\n  });\n\n  // Chat routes\n  app.post('/api/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { messages, workspaceId } = req.body;\n\n      const chatResponse = await generateChatResponse(messages);\n\n      // Save conversation if workspaceId provided\n      if (workspaceId) {\n        const updatedMessages = [...messages, {\n          role: \"assistant\",\n          content: chatResponse,\n          timestamp: new Date().toISOString()\n        }];\n\n        // Try to update existing conversation or create new one\n        try {\n          const existingConversations = await storage.getUserConversations(userId);\n          const workspaceConversation = existingConversations.find(c => c.workspaceId === workspaceId);\n          \n          if (workspaceConversation) {\n            await storage.updateConversation(workspaceConversation.id, updatedMessages);\n          } else {\n            await storage.createConversation({\n              userId,\n              workspaceId,\n              messages: updatedMessages\n            });\n          }\n        } catch (convError) {\n          console.error(\"Error saving conversation:\", convError);\n          // Continue with response even if conversation save fails\n        }\n      }\n\n      res.json({ response: chatResponse });\n    } catch (error) {\n      console.error(\"Error in chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Stripe subscription routes (only if Stripe is configured)\n  if (stripe) {\n    app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n      try {\n        const userId = req.user.claims.sub;\n        let user = await storage.getUser(userId);\n\n        if (!user) {\n          return res.status(404).json({ message: \"User not found\" });\n        }\n\n        if (user.stripeSubscriptionId) {\n          const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n          return res.send({\n            subscriptionId: subscription.id,\n            clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n          });\n        }\n        \n        if (!user.email) {\n          return res.status(400).json({ message: 'No user email on file' });\n        }\n\n        const customer = await stripe.customers.create({\n          email: user.email,\n          name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email,\n        });\n\n        const subscription = await stripe.subscriptions.create({\n          customer: customer.id,\n          items: [{\n            price: process.env.STRIPE_PRICE_ID || 'price_default', // User needs to set this\n          }],\n          payment_behavior: 'default_incomplete',\n          expand: ['latest_invoice.payment_intent'],\n        });\n\n        await storage.updateUserStripeInfo(userId, customer.id, subscription.id);\n    \n        res.send({\n          subscriptionId: subscription.id,\n          clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret,\n        });\n      } catch (error: any) {\n        console.error(\"Stripe subscription error:\", error);\n        return res.status(400).send({ error: { message: error.message } });\n      }\n    });\n  } else {\n    // Placeholder route if Stripe not configured\n    app.post('/api/create-subscription', (req, res) => {\n      res.status(503).json({ message: \"Payment processing not configured. Please set STRIPE_SECRET_KEY.\" });\n    });\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26783},"server/storage.ts":{"content":"import {\n  users,\n  workspaces,\n  templates,\n  conversations,\n  type User,\n  type UpsertUser,\n  type Workspace,\n  type InsertWorkspace,\n  type Template,\n  type InsertTemplate,\n  type Conversation,\n  type InsertConversation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n  updateUserUsage(userId: string, increment: number): Promise<User>;\n  resetMonthlyUsage(userId: string): Promise<User>;\n  \n  // Workspace operations\n  createWorkspace(workspace: InsertWorkspace): Promise<Workspace>;\n  getWorkspace(id: string): Promise<Workspace | undefined>;\n  getUserWorkspaces(userId: string): Promise<Workspace[]>;\n  updateWorkspace(id: string, updates: Partial<Workspace>): Promise<Workspace>;\n  deleteWorkspace(id: string): Promise<void>;\n  \n  // Template operations\n  getTemplates(): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  getTemplatesByCategory(category: string): Promise<Template[]>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  incrementTemplateUsage(id: string): Promise<void>;\n  \n  // Conversation operations\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  getUserConversations(userId: string): Promise<Conversation[]>;\n  updateConversation(id: string, messages: any[]): Promise<Conversation>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        subscriptionStatus: \"active\",\n        usageLimit: 80,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserUsage(userId: string, increment: number): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        monthlyUsage: sql`${users.monthlyUsage} + ${increment}`,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async resetMonthlyUsage(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        monthlyUsage: 0,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Workspace operations\n  async createWorkspace(workspace: InsertWorkspace): Promise<Workspace> {\n    const [newWorkspace] = await db\n      .insert(workspaces)\n      .values(workspace)\n      .returning();\n    return newWorkspace;\n  }\n\n  async getWorkspace(id: string): Promise<Workspace | undefined> {\n    const [workspace] = await db\n      .select()\n      .from(workspaces)\n      .where(eq(workspaces.id, id));\n    return workspace;\n  }\n\n  async getUserWorkspaces(userId: string): Promise<Workspace[]> {\n    return await db\n      .select()\n      .from(workspaces)\n      .where(eq(workspaces.userId, userId))\n      .orderBy(desc(workspaces.createdAt));\n  }\n\n  async updateWorkspace(id: string, updates: Partial<Workspace>): Promise<Workspace> {\n    const [workspace] = await db\n      .update(workspaces)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(workspaces.id, id))\n      .returning();\n    return workspace;\n  }\n\n  async deleteWorkspace(id: string): Promise<void> {\n    await db.delete(workspaces).where(eq(workspaces.id, id));\n  }\n\n  // Template operations\n  async getTemplates(): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(eq(templates.isPublic, true))\n      .orderBy(desc(templates.usageCount));\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db\n      .select()\n      .from(templates)\n      .where(eq(templates.id, id));\n    return template;\n  }\n\n  async getTemplatesByCategory(category: string): Promise<Template[]> {\n    return await db\n      .select()\n      .from(templates)\n      .where(and(eq(templates.category, category), eq(templates.isPublic, true)))\n      .orderBy(desc(templates.usageCount));\n  }\n\n  async createTemplate(template: InsertTemplate): Promise<Template> {\n    const [newTemplate] = await db\n      .insert(templates)\n      .values(template)\n      .returning();\n    return newTemplate;\n  }\n\n  async incrementTemplateUsage(id: string): Promise<void> {\n    await db\n      .update(templates)\n      .set({\n        usageCount: sql`${templates.usageCount} + 1`,\n      })\n      .where(eq(templates.id, id));\n  }\n\n  // Conversation operations\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [newConversation] = await db\n      .insert(conversations)\n      .values(conversation)\n      .returning();\n    return newConversation;\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.id, id));\n    return conversation;\n  }\n\n  async getUserConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(eq(conversations.userId, userId))\n      .orderBy(desc(conversations.updatedAt));\n  }\n\n  async updateConversation(id: string, messages: any[]): Promise<Conversation> {\n    const [conversation] = await db\n      .update(conversations)\n      .set({\n        messages,\n        updatedAt: new Date(),\n      })\n      .where(eq(conversations.id, id))\n      .returning();\n    return conversation;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6652},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"free\"),\n  monthlyUsage: integer(\"monthly_usage\").default(0),\n  usageLimit: integer(\"usage_limit\").default(3),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notion workspaces table\nexport const workspaces = pgTable(\"workspaces\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  prompt: text(\"prompt\").notNull(),\n  notionPageId: varchar(\"notion_page_id\"),\n  theme: varchar(\"theme\").default(\"professional\"),\n  status: varchar(\"status\").default(\"draft\"), // draft, generating, completed, deployed, failed\n  templateId: varchar(\"template_id\"),\n  aiResponse: jsonb(\"ai_response\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Templates table\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\").notNull(),\n  prompt: text(\"prompt\").notNull(),\n  tags: text(\"tags\").array(),\n  preview: jsonb(\"preview\"),\n  isPublic: boolean(\"is_public\").default(true),\n  usageCount: integer(\"usage_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Chat conversations table\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  workspaceId: varchar(\"workspace_id\").references(() => workspaces.id, { onDelete: \"cascade\" }),\n  messages: jsonb(\"messages\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  workspaces: many(workspaces),\n  conversations: many(conversations),\n}));\n\nexport const workspacesRelations = relations(workspaces, ({ one, many }) => ({\n  user: one(users, {\n    fields: [workspaces.userId],\n    references: [users.id],\n  }),\n  conversations: many(conversations),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one }) => ({\n  user: one(users, {\n    fields: [conversations.userId],\n    references: [users.id],\n  }),\n  workspace: one(workspaces, {\n    fields: [conversations.workspaceId],\n    references: [workspaces.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertWorkspaceSchema = createInsertSchema(workspaces).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertWorkspace = z.infer<typeof insertWorkspaceSchema>;\nexport type Workspace = typeof workspaces.$inferSelect;\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type Template = typeof templates.$inferSelect;\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\n","size_bytes":4594},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Chat from \"@/pages/chat\";\nimport Templates from \"@/pages/templates\";\nimport Subscribe from \"@/pages/subscribe\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/chat/:workspaceId?\" component={Chat} />\n          <Route path=\"/templates\" component={Templates} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1288},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: #090909;\n  --foreground: #ebebeb;\n  --card: #101011;\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(45, 25%, 97%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: #f5f5f5;\n  --primary-foreground: #0d0d0d;\n  --secondary: #ebebeb;\n  --secondary-foreground: #0d0d0d;\n  --muted: #404040;\n  --muted-foreground: #ababab;\n  --accent: hsl(0, 0%, 92.16%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: #ffffff;\n  --border: #2b2b2b;\n  --input: #2b2b2b;\n  --ring: hsl(221.74, 13.14%, 34.31%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(45, 25%, 97%);\n  --sidebar-foreground: hsl(20, 14%, 17%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 45%, 80%);\n  --sidebar-accent-foreground: hsl(20, 14%, 17%);\n  --sidebar-border: hsl(45, 15%, 80%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Inter', sans-serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.4rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 2px 4px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 4px 6px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 8px 10px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --primary: hsl(9, 75%, 61%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 96.1%);\n  --secondary-foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(0, 0%, 96.1%);\n  --muted-foreground: hsl(20, 5.9%, 45.1%);\n  --accent: hsl(0, 0%, 96.1%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --ring: hsl(9, 75%, 61%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(0, 0%, 96.1%);\n  --sidebar-accent-foreground: hsl(20, 14.3%, 4.1%);\n  --sidebar-border: hsl(20, 5.9%, 90%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.gradient-text {\n  background: linear-gradient(135deg, hsl(9, 75%, 61%) 0%, hsl(25, 45%, 70%) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Custom scrollbar for dark theme */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--accent-foreground));\n}\n\n/* Ensure proper text wrapping for long content */\n.line-clamp-3 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Backdrop blur support */\n.backdrop-blur {\n  backdrop-filter: blur(8px);\n}\n\n/* Focus styles for better accessibility */\n.focus\\:ring-2:focus {\n  box-shadow: 0 0 0 2px hsl(var(--ring));\n}\n\n/* Custom styles for form elements */\ninput[type=\"text\"],\ninput[type=\"email\"],\ntextarea {\n  transition: all 0.2s ease-in-out;\n}\n\ninput[type=\"text\"]:focus,\ninput[type=\"email\"]:focus,\ntextarea:focus {\n  outline: none;\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 1px hsl(var(--ring));\n}\n","size_bytes":4746},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/Header\";\nimport { ChatInterface } from \"@/components/chat/ChatInterface\";\nimport { WorkspacePreview } from \"@/components/workspace/WorkspacePreview\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, \n  ExternalLink, \n  RefreshCw, \n  Settings, \n  Save,\n  Loader2\n} from \"lucide-react\";\nimport type { Workspace } from \"@shared/schema\";\n\nexport default function Chat() {\n  const params = useParams();\n  const workspaceId = params.workspaceId;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  \n  const [messages, setMessages] = useState<any[]>([]);\n  const [selectedTheme, setSelectedTheme] = useState(\"professional\");\n  const [workspaceTitle, setWorkspaceTitle] = useState(\"\");\n  const [workspaceDescription, setWorkspaceDescription] = useState(\"\");\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: workspace, isLoading: workspaceLoading } = useQuery<Workspace>({\n    queryKey: [\"/api/workspaces\", workspaceId],\n    enabled: !!workspaceId && isAuthenticated,\n    retry: false,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    },\n    onSuccess: (data) => {\n      if (data) {\n        setSelectedTheme(data.theme || \"professional\");\n        setWorkspaceTitle(data.title);\n        setWorkspaceDescription(data.description || \"\");\n      }\n    }\n  });\n\n  const createWorkspaceMutation = useMutation({\n    mutationFn: async (data: { title: string; description: string; prompt: string; theme: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/workspaces\", data);\n      return response.json();\n    },\n    onSuccess: (newWorkspace) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workspaces\"] });\n      toast({\n        title: \"Workspace Created\",\n        description: \"Your workspace has been generated successfully!\",\n      });\n      // Navigate to the new workspace\n      window.location.href = `/chat/${newWorkspace.id}`;\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      } else {\n        toast({\n          title: \"Error\",\n          description: error.message || \"Failed to create workspace\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const refineWorkspaceMutation = useMutation({\n    mutationFn: async (refinementPrompt: string) => {\n      const response = await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/refine`, {\n        refinementPrompt\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workspaces\", workspaceId] });\n      toast({\n        title: \"Workspace Refined\",\n        description: \"Your workspace has been updated successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to refine workspace\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deployWorkspaceMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/workspaces/${workspaceId}/deploy`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workspaces\", workspaceId] });\n      toast({\n        title: \"Workspace Deployed\",\n        description: \"Your workspace has been deployed to Notion successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Deployment Failed\",\n        description: error.message || \"Failed to deploy workspace to Notion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateWorkspace = async (prompt: string) => {\n    if (!workspaceTitle.trim()) {\n      toast({\n        title: \"Missing Title\",\n        description: \"Please provide a title for your workspace\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createWorkspaceMutation.mutate({\n      title: workspaceTitle,\n      description: workspaceDescription,\n      prompt,\n      theme: selectedTheme\n    });\n  };\n\n  const handleRefineWorkspace = async (refinementPrompt: string) => {\n    if (!workspaceId) return;\n    refineWorkspaceMutation.mutate(refinementPrompt);\n  };\n\n  const handleDeployWorkspace = () => {\n    if (!workspaceId) return;\n    deployWorkspaceMutation.mutate();\n  };\n\n  const themes = [\n    { value: \"professional\", label: \"Professional\" },\n    { value: \"pastel\", label: \"Pastel\" },\n    { value: \"dark\", label: \"Dark\" },\n    { value: \"fun\", label: \"Fun\" },\n    { value: \"light\", label: \"Light\" },\n    { value: \"cheerful\", label: \"Cheerful\" },\n    { value: \"loving\", label: \"Loving\" },\n    { value: \"soft\", label: \"Soft\" },\n    { value: \"rough\", label: \"Rough\" }\n  ];\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <Skeleton className=\"h-8 w-48 mb-6\" />\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            <Skeleton className=\"h-96\" />\n            <Skeleton className=\"h-96\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => window.history.back()}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\" data-testid=\"text-chat-title\">\n                {workspace ? `Editing: ${workspace.title}` : \"New Workspace\"}\n              </h1>\n              {workspace && (\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge \n                    variant={workspace.status === 'completed' ? 'default' : \n                           workspace.status === 'deployed' ? 'secondary' : \n                           workspace.status === 'failed' ? 'destructive' : 'outline'}\n                    data-testid=\"badge-workspace-status\"\n                  >\n                    {workspace.status}\n                  </Badge>\n                  {workspace.theme && (\n                    <Badge variant=\"outline\">{workspace.theme}</Badge>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {workspace && workspace.status === 'completed' && (\n            <Button \n              onClick={handleDeployWorkspace}\n              disabled={deployWorkspaceMutation.isPending}\n              data-testid=\"button-deploy-workspace\"\n            >\n              {deployWorkspaceMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <ExternalLink className=\"w-4 h-4 mr-2\" />\n              )}\n              Deploy to Notion\n            </Button>\n          )}\n        </div>\n\n        {/* Workspace Configuration (for new workspaces) */}\n        {!workspace && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Settings className=\"w-5 h-5\" />\n                <span>Workspace Configuration</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Title *</label>\n                <input\n                  type=\"text\"\n                  value={workspaceTitle}\n                  onChange={(e) => setWorkspaceTitle(e.target.value)}\n                  placeholder=\"e.g., Marketing Team CRM\"\n                  className=\"w-full bg-input border border-border px-3 py-2 rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                  data-testid=\"input-workspace-title\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Description</label>\n                <textarea\n                  value={workspaceDescription}\n                  onChange={(e) => setWorkspaceDescription(e.target.value)}\n                  placeholder=\"Brief description of what this workspace will be used for...\"\n                  rows={2}\n                  className=\"w-full bg-input border border-border px-3 py-2 rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none\"\n                  data-testid=\"textarea-workspace-description\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Theme</label>\n                <Select value={selectedTheme} onValueChange={setSelectedTheme}>\n                  <SelectTrigger data-testid=\"select-theme\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {themes.map((theme) => (\n                      <SelectItem key={theme.value} value={theme.value}>\n                        {theme.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Content */}\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Chat Interface */}\n          <div>\n            <ChatInterface\n              workspaceId={workspaceId}\n              onCreateWorkspace={handleCreateWorkspace}\n              onRefineWorkspace={handleRefineWorkspace}\n              isCreating={createWorkspaceMutation.isPending}\n              isRefining={refineWorkspaceMutation.isPending}\n              hasWorkspace={!!workspace}\n            />\n          </div>\n\n          {/* Workspace Preview */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Workspace Preview</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {workspaceLoading ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-6 w-3/4\" />\n                    <Skeleton className=\"h-4 w-full\" />\n                    <Skeleton className=\"h-4 w-2/3\" />\n                    <div className=\"space-y-2\">\n                      {[1, 2, 3].map((i) => (\n                        <Skeleton key={i} className=\"h-8\" />\n                      ))}\n                    </div>\n                  </div>\n                ) : workspace && workspace.aiResponse ? (\n                  <WorkspacePreview workspace={workspace} />\n                ) : (\n                  <div className=\"text-center py-12\">\n                    <div className=\"w-16 h-16 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                      <RefreshCw className=\"w-8 h-8 text-muted-foreground\" />\n                    </div>\n                    <h3 className=\"font-semibold text-lg mb-2\">No Preview Available</h3>\n                    <p className=\"text-muted-foreground\">\n                      {workspace \n                        ? \"Workspace generation in progress...\"\n                        : \"Start a conversation to generate your workspace\"\n                      }\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13255},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Header } from \"@/components/layout/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Plus, \n  MessageSquare, \n  ExternalLink, \n  Calendar, \n  TrendingUp,\n  Users,\n  Database,\n  Layout,\n  Clock\n} from \"lucide-react\";\nimport type { Workspace, User } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const { data: user, isLoading: userLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: workspaces, isLoading: workspacesLoading } = useQuery<Workspace[]>({\n    queryKey: [\"/api/workspaces\"],\n    enabled: isAuthenticated,\n    retry: false,\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    },\n  });\n\n  if (authLoading || userLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-8 w-48\" />\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-32\" />\n              ))}\n            </div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-24\" />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const usagePercentage = user ? (user.monthlyUsage / user.usageLimit) * 100 : 0;\n  const isNearLimit = usagePercentage >= 80;\n  const isAtLimit = usagePercentage >= 100;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-welcome\">\n            Welcome back{user?.firstName ? `, ${user.firstName}` : ''}!\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Create amazing Notion workspaces with AI or choose from our template library.\n          </p>\n        </div>\n\n        {/* Usage Stats */}\n        <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Monthly Usage</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-usage-count\">\n                    {user?.monthlyUsage || 0} / {user?.usageLimit || 3}\n                  </p>\n                </div>\n                <div className={`p-2 rounded-lg ${isAtLimit ? 'bg-destructive/10' : isNearLimit ? 'bg-chart-3/10' : 'bg-chart-2/10'}`}>\n                  <TrendingUp className={`w-5 h-5 ${isAtLimit ? 'text-destructive' : isNearLimit ? 'text-chart-3' : 'text-chart-2'}`} />\n                </div>\n              </div>\n              {isNearLimit && (\n                <div className=\"mt-2\">\n                  <Badge variant={isAtLimit ? \"destructive\" : \"secondary\"}>\n                    {isAtLimit ? \"Limit Reached\" : \"Near Limit\"}\n                  </Badge>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Workspaces Created</p>\n                  <p className=\"text-2xl font-bold\" data-testid=\"text-workspace-count\">\n                    {workspaces?.length || 0}\n                  </p>\n                </div>\n                <div className=\"p-2 rounded-lg bg-primary/10\">\n                  <Layout className=\"w-5 h-5 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Subscription</p>\n                  <p className=\"text-2xl font-bold capitalize\" data-testid=\"text-subscription-status\">\n                    {user?.subscriptionStatus || 'Free'}\n                  </p>\n                </div>\n                <div className=\"p-2 rounded-lg bg-chart-4/10\">\n                  <Users className=\"w-5 h-5 text-chart-4\" />\n                </div>\n              </div>\n              {user?.subscriptionStatus === 'free' && (\n                <div className=\"mt-2\">\n                  <Link href=\"/subscribe\">\n                    <Button size=\"sm\" variant=\"outline\" data-testid=\"button-upgrade\">\n                      Upgrade\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n          <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n            <Link href=\"/chat\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-lg bg-primary/10\">\n                    <MessageSquare className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Start New Chat</h3>\n                    <p className=\"text-muted-foreground\">\n                      Describe your workspace needs and let AI create it for you\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Link>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n            <Link href=\"/templates\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 rounded-lg bg-chart-2/10\">\n                    <Database className=\"w-6 h-6 text-chart-2\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">Browse Templates</h3>\n                    <p className=\"text-muted-foreground\">\n                      Choose from professionally designed workspace templates\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Link>\n          </Card>\n        </div>\n\n        {/* Recent Workspaces */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold\">Recent Workspaces</h2>\n            <Link href=\"/chat\">\n              <Button data-testid=\"button-create-workspace\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Workspace\n              </Button>\n            </Link>\n          </div>\n\n          {workspacesLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-24\" />\n              ))}\n            </div>\n          ) : workspaces && workspaces.length > 0 ? (\n            <div className=\"space-y-4\">\n              {workspaces.slice(0, 5).map((workspace) => (\n                <Card key={workspace.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold text-lg\" data-testid={`text-workspace-title-${workspace.id}`}>\n                            {workspace.title}\n                          </h3>\n                          <Badge \n                            variant={workspace.status === 'completed' ? 'default' : \n                                   workspace.status === 'deployed' ? 'secondary' : \n                                   workspace.status === 'failed' ? 'destructive' : 'outline'}\n                          >\n                            {workspace.status}\n                          </Badge>\n                          {workspace.theme && (\n                            <Badge variant=\"outline\">{workspace.theme}</Badge>\n                          )}\n                        </div>\n                        <p className=\"text-muted-foreground mb-3\">{workspace.description}</p>\n                        <div className=\"flex items-center text-sm text-muted-foreground\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          {new Date(workspace.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Link href={`/chat/${workspace.id}`}>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-${workspace.id}`}>\n                            <MessageSquare className=\"w-4 h-4 mr-2\" />\n                            Edit\n                          </Button>\n                        </Link>\n                        {workspace.status === 'completed' && (\n                          <Button size=\"sm\" data-testid={`button-deploy-${workspace.id}`}>\n                            <ExternalLink className=\"w-4 h-4 mr-2\" />\n                            Deploy\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <div className=\"mb-4\">\n                  <div className=\"w-16 h-16 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <Layout className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"font-semibold text-lg mb-2\">No workspaces yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Get started by creating your first AI-powered Notion workspace\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    <Link href=\"/chat\">\n                      <Button data-testid=\"button-start-chat\">\n                        <MessageSquare className=\"w-4 h-4 mr-2\" />\n                        Start with Chat\n                      </Button>\n                    </Link>\n                    <Link href=\"/templates\">\n                      <Button variant=\"outline\" data-testid=\"button-browse-templates\">\n                        <Database className=\"w-4 h-4 mr-2\" />\n                        Browse Templates\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12288},"client/src/pages/landing.tsx":{"content":"import { useEffect } from \"react\";\nimport { Header } from \"@/components/layout/Header\";\nimport { AuthButtons } from \"@/components/auth/AuthButtons\";\nimport { TemplateCard } from \"@/components/templates/TemplateCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Sparkles, \n  Palette, \n  Database, \n  ExternalLink, \n  LayoutTemplate, \n  Eye, \n  Users, \n  KanbanSquare, \n  Calendar, \n  Target, \n  ShoppingCart, \n  Plus,\n  Play,\n  MessageCircle,\n  LayoutDashboard,\n  Table,\n  BarChart,\n  Check,\n  Shield,\n  RefreshCw,\n  Clock,\n  CreditCard,\n  UserCheck,\n  Brain,\n  Activity,\n  Layers,\n  Github,\n  Twitter,\n  Linkedin,\n  Mail\n} from \"lucide-react\";\n\nexport default function Landing() {\n  useEffect(() => {\n    // Scroll to top when component mounts\n    window.scrollTo(0, 0);\n  }, []);\n\n  const templates = [\n    {\n      id: \"crm\",\n      title: \"SaaS CRM System\",\n      description: \"Complete customer relationship management with lead tracking, deal pipeline, and revenue analytics.\",\n      category: \"Business\",\n      icon: Users,\n      tags: [\"Leads Database\", \"Deal Pipeline\", \"Analytics\"],\n      color: \"chart-1\"\n    },\n    {\n      id: \"project\",\n      title: \"Project Management\",\n      description: \"Task boards, timelines, resource allocation, and team coordination in one workspace.\",\n      category: \"Productivity\",\n      icon: KanbanSquare,\n      tags: [\"Kanban Boards\", \"Timeline\", \"Resources\"],\n      color: \"chart-2\"\n    },\n    {\n      id: \"content\",\n      title: \"Content Calendar\",\n      description: \"Multi-platform content planning with collaboration tools and performance analytics.\",\n      category: \"Marketing\",\n      icon: Calendar,\n      tags: [\"Multi-Platform\", \"Collaboration\", \"Analytics\"],\n      color: \"chart-3\"\n    },\n    {\n      id: \"personal\",\n      title: \"Life Organization\",\n      description: \"Habit tracking, goal management, and personal productivity system for life organization.\",\n      category: \"Personal\",\n      icon: Target,\n      tags: [\"Habit Tracker\", \"Goals\", \"Journal\"],\n      color: \"chart-4\"\n    },\n    {\n      id: \"ecommerce\",\n      title: \"E-commerce Hub\",\n      description: \"Product catalog, order management, inventory tracking, and customer support system.\",\n      category: \"Business\",\n      icon: ShoppingCart,\n      tags: [\"Products\", \"Orders\", \"Inventory\"],\n      color: \"chart-5\"\n    }\n  ];\n\n  const features = [\n    {\n      icon: Sparkles,\n      title: \"AI-Powered Generation\",\n      description: \"Advanced prompt interpretation that understands entities, relationships, and aesthetics to create sophisticated workspaces.\",\n      color: \"primary\"\n    },\n    {\n      icon: Palette,\n      title: \"9 Professional Themes\",\n      description: \"Choose from professional, pastel, dark, fun, and more theme options with customizable density and visual polish.\",\n      color: \"chart-2\"\n    },\n    {\n      icon: Database,\n      title: \"Complex Database Generation\",\n      description: \"Creates databases with formulas, rollups, relations, and multiple view types including kanban, calendar, and timeline.\",\n      color: \"chart-3\"\n    },\n    {\n      icon: ExternalLink,\n      title: \"One-Click Deployment\",\n      description: \"Secure OAuth integration with Notion for instant workspace deployment with full functionality and sample data.\",\n      color: \"chart-4\"\n    },\n    {\n      icon: LayoutTemplate,\n      title: \"LayoutTemplate Library\",\n      description: \"Pre-built templates for CRM, project management, content calendars, and more with guided prompt suggestions.\",\n      color: \"chart-5\"\n    },\n    {\n      icon: Eye,\n      title: \"Real-time Preview\",\n      description: \"Visual workspace preview before deployment with modification options and iterative refinement capabilities.\",\n      color: \"primary\"\n    }\n  ];\n\n  const pricingPlans = [\n    {\n      name: \"Free\",\n      price: 0,\n      description: \"Perfect for trying out the platform\",\n      features: [\n        \"3 workspaces per month\",\n        \"Basic templates\",\n        \"Community access\",\n        \"Standard themes\"\n      ],\n      buttonText: \"Get Started Free\",\n      buttonVariant: \"outline\" as const\n    },\n    {\n      name: \"Pro\",\n      price: 29,\n      description: \"For professionals and small teams\",\n      features: [\n        \"80 workspaces per month\",\n        \"All premium templates\",\n        \"Custom themes\",\n        \"Priority support\",\n        \"Advanced features\",\n        \"CSV export\"\n      ],\n      buttonText: \"Upgrade to Pro\",\n      buttonVariant: \"default\" as const,\n      popular: true\n    },\n    {\n      name: \"Enterprise\",\n      price: 99,\n      description: \"For large teams and organizations\",\n      features: [\n        \"Unlimited workspaces\",\n        \"Custom integrations\",\n        \"Dedicated support\",\n        \"SSO integration\",\n        \"Custom branding\",\n        \"API access\"\n      ],\n      buttonText: \"Contact Sales\",\n      buttonVariant: \"outline\" as const\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <Header />\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-4 py-20 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6 leading-tight\">\n            Transform Ideas into\n            <span className=\"gradient-text block mt-2\">Professional Notion Workspaces</span>\n          </h1>\n          \n          <p className=\"text-xl text-muted-foreground mb-8 leading-relaxed max-w-2xl mx-auto\">\n            Turn natural language descriptions into sophisticated, production-ready Notion dashboards with AI. \n            No design skills required—just describe what you need.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n            <Button\n              size=\"lg\"\n              className=\"text-lg font-semibold\"\n              data-testid=\"button-try-demo\"\n            >\n              <Play className=\"w-5 h-5 mr-2\" />\n              Try Demo\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"lg\"\n              className=\"text-lg font-semibold\"\n              data-testid=\"button-view-templates\"\n            >\n              <LayoutTemplate className=\"w-5 h-5 mr-2\" />\n              View Templates\n            </Button>\n          </div>\n\n          {/* Auth Options */}\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"pt-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Quick Start</h3>\n              <AuthButtons />\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Demo Preview */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Chat Interface Preview */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold\">AI Chat Interface</h3>\n                <div className=\"flex space-x-2\">\n                  <div className=\"w-3 h-3 bg-destructive rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-chart-3 rounded-full\"></div>\n                  <div className=\"w-3 h-3 bg-chart-2 rounded-full\"></div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4 h-64 overflow-y-auto bg-muted/20 rounded-lg p-4\">\n                {/* User Message */}\n                <div className=\"flex justify-end\">\n                  <div className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg max-w-xs\">\n                    I need a CRM system for my SaaS startup with lead tracking, deal pipeline, and revenue analytics\n                  </div>\n                </div>\n                \n                {/* AI Response */}\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                    <Sparkles className=\"w-4 h-4 text-accent-foreground\" />\n                  </div>\n                  <Card className=\"max-w-md\">\n                    <CardContent className=\"p-4\">\n                      <p className=\"mb-2\">Perfect! I'll create a comprehensive SaaS CRM with:</p>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>• Leads database with qualification scoring</li>\n                        <li>• Deal pipeline with stage tracking</li>\n                        <li>• Revenue analytics with MRR calculations</li>\n                        <li>• Churn rate formulas and metrics</li>\n                      </ul>\n                      <p className=\"mt-2 text-sm\">Generating workspace... <span className=\"animate-pulse\">●</span></p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 flex items-center space-x-2\">\n                <input \n                  type=\"text\" \n                  placeholder=\"Describe your workspace needs...\" \n                  className=\"flex-1 bg-input border border-border px-4 py-2 rounded-lg text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring\"\n                  data-testid=\"input-chat-demo\"\n                />\n                <Button data-testid=\"button-send-demo\">\n                  <Mail className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Workspace Preview */}\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Before */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n                  <MessageCircle className=\"w-5 h-5 text-muted-foreground\" />\n                  <span>Natural Language Input</span>\n                </h4>\n                <div className=\"bg-muted/20 rounded-lg p-4 text-muted-foreground italic\">\n                  \"I need a project management system for my marketing team with task boards, \n                  content calendar, and team collaboration features\"\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* After */}\n            <Card>\n              <CardContent className=\"p-6\">\n                <h4 className=\"text-lg font-semibold mb-4 flex items-center space-x-2\">\n                  <LayoutDashboard className=\"w-5 h-5 text-primary\" />\n                  <span>Generated Workspace</span>\n                </h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Table className=\"w-4 h-4 text-chart-1\" />\n                    <span>Tasks Database (Kanban View)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Calendar className=\"w-4 h-4 text-chart-2\" />\n                    <span>Content Calendar (Timeline View)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Users className=\"w-4 h-4 text-chart-3\" />\n                    <span>Team Directory (Gallery View)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <BarChart className=\"w-4 h-4 text-chart-4\" />\n                    <span>Analytics Dashboard</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Powerful Features</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to create professional Notion workspaces in minutes, not hours\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className={`w-12 h-12 bg-${feature.color}/10 rounded-lg flex items-center justify-center mb-4`}>\n                    <feature.icon className={`w-6 h-6 text-${feature.color}`} />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Templates Section */}\n      <section id=\"templates\" className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">LayoutTemplate Library</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Start with professionally designed templates or create custom workspaces from scratch\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {templates.map((template) => (\n              <TemplateCard key={template.id} template={template} />\n            ))}\n            \n            {/* Custom LayoutTemplate */}\n            <Card className=\"border-dashed hover:shadow-lg transition-shadow cursor-pointer group\">\n              <CardContent className=\"p-6 flex flex-col items-center justify-center text-center min-h-[200px]\">\n                <div className=\"w-12 h-12 bg-muted/20 rounded-lg flex items-center justify-center mb-4 group-hover:bg-primary/10 transition-colors\">\n                  <Plus className=\"w-6 h-6 text-muted-foreground group-hover:text-primary transition-colors\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\">Create Custom</h3>\n                <p className=\"text-muted-foreground text-sm\">\n                  Describe your needs and let AI create a completely custom workspace tailored to your requirements.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Simple, Transparent Pricing</h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Choose the plan that fits your workspace creation needs\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {pricingPlans.map((plan, index) => (\n              <Card key={index} className={plan.popular ? \"border-2 border-primary relative\" : \"\"}>\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-semibold\">\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                \n                <CardContent className=\"p-6\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-xl font-semibold mb-2\">{plan.name}</h3>\n                    <div className=\"text-3xl font-bold mb-2\">\n                      ${plan.price}<span className=\"text-lg text-muted-foreground\">/month</span>\n                    </div>\n                    <p className=\"text-muted-foreground\">{plan.description}</p>\n                  </div>\n                  \n                  <ul className=\"space-y-3 mb-6\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center space-x-2\">\n                        <Check className=\"w-4 h-4 text-chart-2\" />\n                        <span className=\"text-sm\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  \n                  <Button \n                    variant={plan.buttonVariant}\n                    className=\"w-full\"\n                    data-testid={`button-${plan.name.toLowerCase()}-plan`}\n                  >\n                    {plan.buttonText}\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Billing Integration Info */}\n          <Card className=\"mt-8 bg-muted/20\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center space-x-4 mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5 text-chart-2\" />\n                  <span className=\"text-sm\">Secure payments with Stripe</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RefreshCw className=\"w-5 h-5 text-chart-2\" />\n                  <span className=\"text-sm\">Cancel anytime</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5 text-chart-2\" />\n                  <span className=\"text-sm\">14-day money back guarantee</span>\n                </div>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                All plans include secure Notion OAuth integration and one-click workspace deployment\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Integration Section */}\n      <section className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Seamless Integrations</h2>\n          <p className=\"text-xl text-muted-foreground mb-12\">\n            Connect with the tools you already use and love\n          </p>\n\n          {/* Notion Integration Highlight */}\n          <Card className=\"mb-8\">\n            <CardContent className=\"p-8\">\n              <div className=\"flex items-center justify-center space-x-4 mb-6\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Layers className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"text-2xl font-bold\">→</div>\n                <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                  <svg className=\"w-6 h-6\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M4.459 4.208c.746.606 1.026.56 2.428.467l13.215-.913c.467-.056.56-.28.467-.746L20.09.648c-.093-.467-.28-.56-.747-.467L6.887.181c-.467.093-.746.467-.746.934L6.141 3.74c0 .467.186.746.318.468zM3.775 7.179c-.093-.467.186-.84.653-.84l14.853-.373c.467-.093.747.093.747.56l.373 11.695c0 .467-.28.747-.747.747l-1.773.093c-.467.093-.747-.093-.747-.56l-.373-9.922c-.093-.467-.28-.654-.747-.56L4.988 8.019c-.467.093-.747-.28-.654-.747L3.775 7.18zm11.695 4.006c.093 1.12.746 1.773 1.866 1.773 1.12-.093 1.773-.746 1.773-1.866-.093-1.12-.746-1.773-1.866-1.773-1.12.093-1.773.746-1.773 1.866z\"/>\n                  </svg>\n                </div>\n              </div>\n              \n              <h3 className=\"text-xl font-semibold mb-3\">Notion OAuth Integration</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Secure authentication with your Notion workspace for instant deployment of generated templates with full functionality.\n              </p>\n              \n              <div className=\"grid md:grid-cols-3 gap-4 text-sm\">\n                <div className=\"bg-muted/20 rounded-lg p-3\">\n                  <Shield className=\"w-4 h-4 text-chart-2 mb-2\" />\n                  <div className=\"font-semibold\">Secure OAuth</div>\n                  <div className=\"text-muted-foreground\">Industry-standard authentication</div>\n                </div>\n                <div className=\"bg-muted/20 rounded-lg p-3\">\n                  <ExternalLink className=\"w-4 h-4 text-chart-3 mb-2\" />\n                  <div className=\"font-semibold\">Instant Deploy</div>\n                  <div className=\"text-muted-foreground\">One-click workspace creation</div>\n                </div>\n                <div className=\"bg-muted/20 rounded-lg p-3\">\n                  <Database className=\"w-4 h-4 text-chart-4 mb-2\" />\n                  <div className=\"font-semibold\">Full Features</div>\n                  <div className=\"text-muted-foreground\">Formulas, relations, views</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Other Integrations */}\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-8 h-8 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <CreditCard className=\"w-4 h-4\" />\n                </div>\n                <div className=\"font-semibold text-sm\">Stripe</div>\n                <div className=\"text-muted-foreground text-xs\">Payment processing</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-8 h-8 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <UserCheck className=\"w-4 h-4\" />\n                </div>\n                <div className=\"font-semibold text-sm\">Replit Auth</div>\n                <div className=\"text-muted-foreground text-xs\">User authentication</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-8 h-8 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <Brain className=\"w-4 h-4\" />\n                </div>\n                <div className=\"font-semibold text-sm\">OpenRouter</div>\n                <div className=\"text-muted-foreground text-xs\">AI generation</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"w-8 h-8 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <Activity className=\"w-4 h-4\" />\n                </div>\n                <div className=\"font-semibold text-sm\">Analytics</div>\n                <div className=\"text-muted-foreground text-xs\">Usage tracking</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-muted/20 py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-6 h-6 bg-primary rounded flex items-center justify-center\">\n                  <Layers className=\"w-4 h-4 text-primary-foreground\" />\n                </div>\n                <span className=\"font-bold\">Nicer SaaS</span>\n              </div>\n              <p className=\"text-muted-foreground text-sm\">\n                Transform natural language into professional Notion workspaces with AI-powered generation.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3\">Product</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#features\" className=\"hover:text-foreground transition-colors\">Features</a></li>\n                <li><a href=\"#templates\" className=\"hover:text-foreground transition-colors\">Templates</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-foreground transition-colors\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">API Documentation</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3\">Resources</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Community</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Blog</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Status</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-3\">Company</h4>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">About</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms of Service</a></li>\n                <li><a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border pt-6 flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"text-sm text-muted-foreground mb-4 md:mb-0\">\n              © 2024 Nicer SaaS. All rights reserved.\n            </div>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                <Twitter className=\"w-4 h-4\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                <Github className=\"w-4 h-4\" />\n              </a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                <Linkedin className=\"w-4 h-4\" />\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":26794},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/layout/Header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Check, \n  Crown, \n  ArrowLeft,\n  Shield,\n  CreditCard,\n  Zap\n} from \"lucide-react\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || '');\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"You are now subscribed to Pro!\",\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || !elements}\n        className=\"w-full\"\n        size=\"lg\"\n        data-testid=\"button-subscribe-submit\"\n      >\n        <Crown className=\"w-4 h-4 mr-2\" />\n        Subscribe to Pro\n      </Button>\n    </form>\n  );\n};\n\nexport default function Subscribe() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please sign in to subscribe to a plan.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (isAuthenticated) {\n      // Create subscription as soon as the page loads\n      apiRequest(\"POST\", \"/api/create-subscription\")\n        .then((res) => res.json())\n        .then((data) => {\n          setClientSecret(data.clientSecret);\n          setIsLoading(false);\n        })\n        .catch((error) => {\n          console.error('Subscription creation error:', error);\n          toast({\n            title: \"Subscription Error\",\n            description: error.message || \"Failed to initialize subscription. Please try again.\",\n            variant: \"destructive\",\n          });\n          setIsLoading(false);\n        });\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const proFeatures = [\n    \"80 workspaces per month\",\n    \"All premium templates\",\n    \"Custom themes and styling\",\n    \"Priority customer support\",\n    \"Advanced workspace features\",\n    \"CSV export functionality\",\n    \"Workspace collaboration tools\",\n    \"Advanced analytics dashboard\"\n  ];\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Skeleton className=\"h-8 w-48 mb-6\" />\n            <div className=\"space-y-6\">\n              <Skeleton className=\"h-64\" />\n              <Skeleton className=\"h-32\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <Card>\n              <CardContent className=\"p-12\">\n                <div className=\"w-16 h-16 bg-destructive/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <CreditCard className=\"w-8 h-8 text-destructive\" />\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">Payment Setup Error</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  We're having trouble setting up your subscription. This might be due to payment processing configuration.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                  <Button variant=\"outline\" onClick={() => window.history.back()}>\n                    Go Back\n                  </Button>\n                  <Button onClick={() => window.location.reload()}>\n                    Try Again\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => window.history.back()}\n                data-testid=\"button-back-subscribe\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-subscribe-title\">\n              Upgrade to Pro\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Unlock unlimited potential with advanced features and priority support.\n            </p>\n          </div>\n\n          {/* Current Plan Status */}\n          {user && (\n            <Card className=\"mb-6\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold mb-1\">Current Plan</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\" className=\"capitalize\">\n                        {user.subscriptionStatus || 'Free'}\n                      </Badge>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {user.monthlyUsage || 0} / {user.usageLimit || 3} workspaces used\n                      </span>\n                    </div>\n                  </div>\n                  {user.subscriptionStatus === 'active' && (\n                    <Badge variant=\"secondary\">\n                      <Crown className=\"w-3 h-3 mr-1\" />\n                      Pro Member\n                    </Badge>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Pro Plan Details */}\n          <Card className=\"mb-6 border-2 border-primary\">\n            <CardHeader>\n              <div className=\"text-center\">\n                <div className=\"inline-flex items-center space-x-2 bg-primary/10 px-3 py-1 rounded-full mb-3\">\n                  <Crown className=\"w-4 h-4 text-primary\" />\n                  <span className=\"text-sm font-semibold text-primary\">Pro Plan</span>\n                </div>\n                <CardTitle className=\"text-2xl\">$29<span className=\"text-lg text-muted-foreground\">/month</span></CardTitle>\n                <p className=\"text-muted-foreground\">Everything you need for professional workspace creation</p>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3 mb-6\">\n                {proFeatures.map((feature, index) => (\n                  <li key={index} className=\"flex items-center space-x-3\">\n                    <div className=\"w-5 h-5 bg-chart-2/10 rounded-full flex items-center justify-center\">\n                      <Check className=\"w-3 h-3 text-chart-2\" />\n                    </div>\n                    <span className=\"text-sm\">{feature}</span>\n                  </li>\n                ))}\n              </ul>\n\n              {/* Payment Benefits */}\n              <div className=\"bg-muted/20 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <Shield className=\"w-5 h-5 text-chart-2\" />\n                  <span className=\"font-semibold\">Secure Payment</span>\n                </div>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• Industry-standard encryption</li>\n                  <li>• No setup fees or hidden charges</li>\n                  <li>• Cancel anytime with full refund policy</li>\n                  <li>• 14-day money-back guarantee</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CreditCard className=\"w-5 h-5\" />\n                <span>Payment Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Elements stripe={stripePromise} options={{ clientSecret }}>\n                <SubscribeForm />\n              </Elements>\n              \n              <div className=\"mt-6 pt-6 border-t border-border\">\n                <div className=\"flex items-center justify-center space-x-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Shield className=\"w-4 h-4\" />\n                    <span>SSL Secured</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Zap className=\"w-4 h-4\" />\n                    <span>Instant Access</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Check className=\"w-4 h-4\" />\n                    <span>Money Back Guarantee</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* FAQ */}\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle>Frequently Asked Questions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-1\">Can I cancel anytime?</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Yes, you can cancel your subscription at any time. You'll continue to have Pro access until the end of your billing period.\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-1\">What happens to my workspaces if I downgrade?</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your existing workspaces will remain intact. You'll just be limited to the free plan's monthly creation limit going forward.\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-1\">Do you offer refunds?</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  We offer a 14-day money-back guarantee. If you're not satisfied, contact support for a full refund.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11939},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/Header\";\nimport { TemplateCard } from \"@/components/templates/TemplateCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Search, \n  Plus, \n  Filter,\n  Users,\n  KanbanSquare,\n  Calendar,\n  Target,\n  ShoppingCart,\n  Briefcase,\n  GraduationCap,\n  Heart,\n  Palette\n} from \"lucide-react\";\nimport type { Template } from \"@shared/schema\";\n\nexport default function Templates() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTheme, setSelectedTheme] = useState(\"professional\");\n\n  const { data: templates, isLoading } = useQuery<Template[]>({\n    queryKey: [\"/api/templates\", selectedCategory !== \"all\" ? selectedCategory : undefined],\n    retry: false,\n  });\n\n  const useTemplateMutation = useMutation({\n    mutationFn: async ({ templateId, theme }: { templateId: string; theme: string }) => {\n      const response = await apiRequest(\"POST\", `/api/templates/${templateId}/use`, { theme });\n      return response.json();\n    },\n    onSuccess: (workspace) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/workspaces\"] });\n      toast({\n        title: \"Template Applied\",\n        description: \"Your workspace has been created from the template!\",\n      });\n      // Navigate to the new workspace\n      window.location.href = `/chat/${workspace.id}`;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to apply template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const categories = [\n    { value: \"all\", label: \"All Templates\", icon: Palette },\n    { value: \"business\", label: \"Business\", icon: Briefcase },\n    { value: \"productivity\", label: \"Productivity\", icon: KanbanSquare },\n    { value: \"marketing\", label: \"Marketing\", icon: Calendar },\n    { value: \"personal\", label: \"Personal\", icon: Heart },\n    { value: \"education\", label: \"Education\", icon: GraduationCap },\n  ];\n\n  const themes = [\n    { value: \"professional\", label: \"Professional\" },\n    { value: \"pastel\", label: \"Pastel\" },\n    { value: \"dark\", label: \"Dark\" },\n    { value: \"fun\", label: \"Fun\" },\n    { value: \"light\", label: \"Light\" },\n    { value: \"cheerful\", label: \"Cheerful\" },\n    { value: \"loving\", label: \"Loving\" },\n    { value: \"soft\", label: \"Soft\" },\n    { value: \"rough\", label: \"Rough\" }\n  ];\n\n  const featuredTemplates = [\n    {\n      id: \"featured-crm\",\n      title: \"SaaS CRM System\",\n      description: \"Complete customer relationship management with lead tracking, deal pipeline, and revenue analytics.\",\n      category: \"Business\",\n      icon: Users,\n      tags: [\"Leads Database\", \"Deal Pipeline\", \"Analytics\"],\n      color: \"chart-1\",\n      prompt: \"Create a comprehensive SaaS CRM system with lead tracking, deal pipeline management, revenue analytics, churn rate calculations, and customer communication logs.\"\n    },\n    {\n      id: \"featured-project\",\n      title: \"Project Management Hub\",\n      description: \"Task boards, timelines, resource allocation, and team coordination in one workspace.\",\n      category: \"Productivity\",\n      icon: KanbanSquare,\n      tags: [\"Kanban Boards\", \"Timeline\", \"Resources\"],\n      color: \"chart-2\",\n      prompt: \"Build a project management workspace with task boards, timeline views, resource allocation, team coordination, milestone tracking, and progress reporting.\"\n    },\n    {\n      id: \"featured-content\",\n      title: \"Content Calendar\",\n      description: \"Multi-platform content planning with collaboration tools and performance analytics.\",\n      category: \"Marketing\",\n      icon: Calendar,\n      tags: [\"Multi-Platform\", \"Collaboration\", \"Analytics\"],\n      color: \"chart-3\",\n      prompt: \"Create a content calendar workspace for multi-platform content planning, collaboration tools, publishing schedules, performance analytics, and content ideation.\"\n    },\n    {\n      id: \"featured-personal\",\n      title: \"Life Organization System\",\n      description: \"Habit tracking, goal management, and personal productivity system for life organization.\",\n      category: \"Personal\",\n      icon: Target,\n      tags: [\"Habit Tracker\", \"Goals\", \"Journal\"],\n      color: \"chart-4\",\n      prompt: \"Design a personal life organization system with habit tracking, goal management, daily journaling, mood tracking, and personal productivity metrics.\"\n    },\n    {\n      id: \"featured-ecommerce\",\n      title: \"E-commerce Operations\",\n      description: \"Product catalog, order management, inventory tracking, and customer support system.\",\n      category: \"Business\",\n      icon: ShoppingCart,\n      tags: [\"Products\", \"Orders\", \"Inventory\"],\n      color: \"chart-5\",\n      prompt: \"Build an e-commerce operations workspace with product catalog, order management, inventory tracking, customer support tickets, and sales analytics.\"\n    }\n  ];\n\n  // Combine database templates with featured templates if database is empty\n  const allTemplates = templates && templates.length > 0 \n    ? templates.map(t => ({ ...t, tags: t.tags || [], usageCount: t.usageCount || 0 }))\n    : [\n        ...featuredTemplates,\n        ...(templates || []).map(t => ({ ...t, tags: t.tags || [], usageCount: t.usageCount || 0 }))\n      ];\n\n  const filteredTemplates = allTemplates.filter(template => {\n    const matchesCategory = selectedCategory === \"all\" || \n      template.category.toLowerCase() === selectedCategory.toLowerCase();\n    const matchesSearch = !searchQuery || \n      template.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      template.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return matchesCategory && matchesSearch;\n  });\n\n  const handleUseTemplate = (template: any) => {\n    useTemplateMutation.mutate({\n      templateId: template.id,\n      theme: selectedTheme\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-templates-title\">Template Library</h1>\n          <p className=\"text-muted-foreground\">\n            Choose from professionally designed templates to jumpstart your Notion workspace creation.\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col lg:flex-row gap-4 mb-8\">\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search templates...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-templates\"\n              />\n            </div>\n          </div>\n          \n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-full lg:w-48\" data-testid=\"select-category\">\n              <div className=\"flex items-center space-x-2\">\n                <Filter className=\"w-4 h-4\" />\n                <SelectValue />\n              </div>\n            </SelectTrigger>\n            <SelectContent>\n              {categories.map((category) => (\n                <SelectItem key={category.value} value={category.value}>\n                  <div className=\"flex items-center space-x-2\">\n                    <category.icon className=\"w-4 h-4\" />\n                    <span>{category.label}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          <Select value={selectedTheme} onValueChange={setSelectedTheme}>\n            <SelectTrigger className=\"w-full lg:w-48\" data-testid=\"select-template-theme\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              {themes.map((theme) => (\n                <SelectItem key={theme.value} value={theme.value}>\n                  {theme.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Templates Grid */}\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <Skeleton key={i} className=\"h-64\" />\n            ))}\n          </div>\n        ) : filteredTemplates.length > 0 ? (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template) => (\n              <TemplateCard\n                key={template.id}\n                template={template}\n                onUse={() => handleUseTemplate(template)}\n                isLoading={useTemplateMutation.isPending}\n                selectedTheme={selectedTheme}\n              />\n            ))}\n            \n            {/* Custom Template Option */}\n            <Card className=\"border-dashed hover:shadow-lg transition-shadow cursor-pointer group\">\n              <CardContent className=\"p-6 flex flex-col items-center justify-center text-center min-h-[280px]\">\n                <div className=\"w-12 h-12 bg-muted/20 rounded-lg flex items-center justify-center mb-4 group-hover:bg-primary/10 transition-colors\">\n                  <Plus className=\"w-6 h-6 text-muted-foreground group-hover:text-primary transition-colors\" />\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\">\n                  Create Custom Workspace\n                </h3>\n                <p className=\"text-muted-foreground text-sm mb-4\">\n                  Start from scratch and describe exactly what you need. Our AI will create a custom workspace tailored to your requirements.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.location.href = '/chat'}\n                  data-testid=\"button-create-custom\"\n                >\n                  Start Chat\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-muted/20 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"font-semibold text-lg mb-2\">No Templates Found</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {searchQuery \n                  ? `No templates match \"${searchQuery}\" in the ${selectedCategory} category.`\n                  : `No templates available in the ${selectedCategory} category.`\n                }\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setSelectedCategory(\"all\");\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n                <Button onClick={() => window.location.href = '/chat'} data-testid=\"button-create-custom-fallback\">\n                  Create Custom Workspace\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Call to Action */}\n        <div className=\"mt-16 text-center\">\n          <Card className=\"bg-muted/20\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold mb-4\">Need Something Specific?</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Can't find the perfect template? Describe your exact needs and let our AI create a completely custom workspace for you.\n              </p>\n              <Button size=\"lg\" onClick={() => window.location.href = '/chat'} data-testid=\"button-start-custom-chat\">\n                Start Custom Chat\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12867},"client/src/components/auth/AuthButtons.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Github, Mail } from \"lucide-react\";\n\nexport function AuthButtons() {\n  const handleAuth = (provider?: string) => {\n    // All auth providers use the same login endpoint with Replit Auth\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Button \n        onClick={() => handleAuth('google')}\n        className=\"w-full bg-accent hover:bg-accent/80 text-accent-foreground\"\n        data-testid=\"button-auth-google\"\n      >\n        <svg className=\"w-5 h-5 mr-3\" viewBox=\"0 0 24 24\">\n          <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n          <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n          <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n          <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n        </svg>\n        Continue with Google\n      </Button>\n      \n      <Button \n        onClick={() => handleAuth('github')}\n        className=\"w-full bg-accent hover:bg-accent/80 text-accent-foreground\"\n        data-testid=\"button-auth-github\"\n      >\n        <Github className=\"w-5 h-5 mr-3\" />\n        Continue with GitHub\n      </Button>\n      \n      <Button \n        onClick={() => handleAuth('email')}\n        className=\"w-full bg-accent hover:bg-accent/80 text-accent-foreground\"\n        data-testid=\"button-auth-email\"\n      >\n        <Mail className=\"w-5 h-5 mr-3\" />\n        Continue with Email\n      </Button>\n    </div>\n  );\n}\n","size_bytes":1902},"client/src/components/chat/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Send, \n  Sparkles, \n  User, \n  Loader2,\n  MessageSquare,\n  Lightbulb\n} from \"lucide-react\";\n\ninterface Message {\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: string;\n}\n\ninterface ChatInterfaceProps {\n  workspaceId?: string;\n  onCreateWorkspace: (prompt: string) => Promise<void>;\n  onRefineWorkspace: (refinementPrompt: string) => Promise<void>;\n  isCreating: boolean;\n  isRefining: boolean;\n  hasWorkspace: boolean;\n}\n\nconst suggestedPrompts = [\n  \"Create a CRM system for my startup with lead tracking and sales pipeline\",\n  \"I need a project management workspace for my marketing team\",\n  \"Build a content calendar for social media planning\",\n  \"Design a personal productivity system with habit tracking\",\n  \"Create an e-commerce operations dashboard with inventory management\"\n];\n\nexport function ChatInterface({\n  workspaceId,\n  onCreateWorkspace,\n  onRefineWorkspace,\n  isCreating,\n  isRefining,\n  hasWorkspace\n}: ChatInterfaceProps) {\n  const { toast } = useToast();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const chatMutation = useMutation({\n    mutationFn: async (message: string) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", {\n        messages: [...messages, { role: \"user\", content: message, timestamp: new Date().toISOString() }],\n        workspaceId\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: Message = {\n        role: \"assistant\",\n        content: data.response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      setIsLoading(false);\n    },\n    onError: (error) => {\n      setIsLoading(false);\n      toast({\n        title: \"Chat Error\",\n        description: error.message || \"Failed to get response\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || isCreating || isRefining) return;\n\n    const userMessage: Message = {\n      role: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    // If this is the first message and no workspace exists, create one\n    if (!hasWorkspace && messages.length === 0) {\n      try {\n        await onCreateWorkspace(inputValue.trim());\n      } catch (error) {\n        setIsLoading(false);\n        return;\n      }\n    } else if (hasWorkspace) {\n      // If workspace exists, this is a refinement\n      try {\n        await onRefineWorkspace(inputValue.trim());\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        return;\n      }\n    } else {\n      // Regular chat\n      chatMutation.mutate(inputValue.trim());\n    }\n\n    setInputValue(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleSuggestedPrompt = (prompt: string) => {\n    setInputValue(prompt);\n  };\n\n  const isDisabled = isLoading || isCreating || isRefining;\n\n  return (\n    <Card className=\"h-[600px] flex flex-col\">\n      <CardContent className=\"p-4 flex flex-col h-full\">\n        {/* Messages Area */}\n        <ScrollArea className=\"flex-1 mb-4\">\n          <div className=\"space-y-4\">\n            {messages.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <MessageSquare className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold text-lg mb-2\">\n                  {hasWorkspace ? \"Refine Your Workspace\" : \"Describe Your Workspace\"}\n                </h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {hasWorkspace \n                    ? \"Tell me what you'd like to change or improve about your workspace.\"\n                    : \"Tell me what kind of Notion workspace you need and I'll create it for you.\"\n                  }\n                </p>\n                \n                {/* Suggested Prompts */}\n                {!hasWorkspace && (\n                  <div>\n                    <div className=\"flex items-center justify-center space-x-2 mb-4\">\n                      <Lightbulb className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm text-muted-foreground\">Try these examples:</span>\n                    </div>\n                    <div className=\"space-y-2 max-w-md mx-auto\">\n                      {suggestedPrompts.slice(0, 3).map((prompt, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleSuggestedPrompt(prompt)}\n                          className=\"w-full text-left justify-start h-auto py-2 px-3\"\n                          data-testid={`button-suggested-prompt-${index}`}\n                        >\n                          <span className=\"text-xs\">{prompt}</span>\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n            \n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div className={`flex items-start space-x-3 max-w-[80%] ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                    message.role === 'user' ? 'bg-primary' : 'bg-accent'\n                  }`}>\n                    {message.role === 'user' ? (\n                      <User className=\"w-4 h-4 text-primary-foreground\" />\n                    ) : (\n                      <Sparkles className=\"w-4 h-4 text-accent-foreground\" />\n                    )}\n                  </div>\n                  <Card className={message.role === 'user' ? 'bg-primary text-primary-foreground' : ''}>\n                    <CardContent className=\"p-3\">\n                      <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                      <span className=\"text-xs opacity-70 mt-2 block\">\n                        {new Date(message.timestamp).toLocaleTimeString()}\n                      </span>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            ))}\n            \n            {(isLoading || isCreating || isRefining) && (\n              <div className=\"flex justify-start\">\n                <div className=\"flex items-start space-x-3 max-w-[80%]\">\n                  <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                    <Loader2 className=\"w-4 h-4 text-accent-foreground animate-spin\" />\n                  </div>\n                  <Card>\n                    <CardContent className=\"p-3\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {isCreating \n                          ? \"Creating your workspace...\" \n                          : isRefining \n                          ? \"Refining your workspace...\" \n                          : \"Thinking...\"\n                        }\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n            \n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Input Area */}\n        <div className=\"flex space-x-2\">\n          <div className=\"flex-1\">\n            <Textarea\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={hasWorkspace \n                ? \"Describe what you'd like to change...\" \n                : \"Describe your workspace needs...\"\n              }\n              className=\"min-h-[50px] max-h-[120px] resize-none\"\n              disabled={isDisabled}\n              data-testid=\"textarea-chat-input\"\n            />\n          </div>\n          <Button\n            onClick={handleSendMessage}\n            disabled={!inputValue.trim() || isDisabled}\n            data-testid=\"button-send-message\"\n          >\n            {isDisabled ? (\n              <Loader2 className=\"w-4 h-4 animate-spin\" />\n            ) : (\n              <Send className=\"w-4 h-4\" />\n            )}\n          </Button>\n        </div>\n\n        {/* Status Messages */}\n        {isCreating && (\n          <div className=\"mt-2 text-center text-sm text-muted-foreground\">\n            🎨 Generating your workspace with AI...\n          </div>\n        )}\n        {isRefining && (\n          <div className=\"mt-2 text-center text-sm text-muted-foreground\">\n            ✨ Refining your workspace...\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9910},"client/src/components/layout/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Layers, \n  Menu, \n  LogOut, \n  User, \n  MessageSquare, \n  Database, \n  CreditCard,\n  Settings\n} from \"lucide-react\";\n\nexport function Header() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const handleSignOut = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b border-border bg-background/80 backdrop-blur\">\n      <div className=\"container mx-auto px-4 flex h-16 items-center justify-between\">\n        {/* Logo */}\n        <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-logo\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <Layers className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-bold\">Nicer SaaS</span>\n        </Link>\n        \n        {/* Desktop Navigation */}\n        {isAuthenticated ? (\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <Link href=\"/chat\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-link-chat\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Chat\n              </Button>\n            </Link>\n            <Link href=\"/templates\">\n              <Button variant=\"ghost\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-link-templates\">\n                <Database className=\"w-4 h-4 mr-2\" />\n                Templates\n              </Button>\n            </Link>\n            {user?.subscriptionStatus === 'free' && (\n              <Link href=\"/subscribe\">\n                <Button variant=\"ghost\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-link-upgrade\">\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Upgrade\n                </Button>\n              </Link>\n            )}\n          </nav>\n        ) : (\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Features\n            </a>\n            <a href=\"#templates\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Templates\n            </a>\n            <a href=\"#pricing\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n              Pricing\n            </a>\n          </nav>\n        )}\n\n        {/* Desktop Auth */}\n        <div className=\"hidden md:flex items-center space-x-3\">\n          {isLoading ? (\n            <div className=\"w-8 h-8 bg-muted animate-pulse rounded-full\" />\n          ) : isAuthenticated ? (\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"flex items-center space-x-2\">\n                {user?.profileImageUrl ? (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-8 h-8 rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                    <User className=\"w-4 h-4\" />\n                  </div>\n                )}\n                <span className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                  {user?.firstName || user?.email?.split('@')[0] || 'User'}\n                </span>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={handleSignOut}\n                data-testid=\"button-sign-out\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Sign Out\n              </Button>\n            </div>\n          ) : (\n            <>\n              <Button variant=\"ghost\" data-testid=\"button-sign-in\" asChild>\n                <a href=\"/api/login\">Sign In</a>\n              </Button>\n              <Button data-testid=\"button-get-started\" asChild>\n                <a href=\"/api/login\">Get Started</a>\n              </Button>\n            </>\n          )}\n        </div>\n\n        {/* Mobile Menu */}\n        <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>\n          <SheetTrigger asChild className=\"md:hidden\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-mobile-menu\">\n              <Menu className=\"w-5 h-5\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"w-[300px]\">\n            <div className=\"flex flex-col space-y-4 mt-6\">\n              {isAuthenticated ? (\n                <>\n                  {/* User Info */}\n                  <div className=\"flex items-center space-x-3 pb-4 border-b border-border\">\n                    {user?.profileImageUrl ? (\n                      <img \n                        src={user.profileImageUrl} \n                        alt=\"Profile\" \n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center\">\n                        <User className=\"w-5 h-5\" />\n                      </div>\n                    )}\n                    <div>\n                      <div className=\"font-medium\" data-testid=\"text-mobile-user-name\">\n                        {user?.firstName || user?.email?.split('@')[0] || 'User'}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground capitalize\">\n                        {user?.subscriptionStatus || 'Free'} Plan\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Navigation Links */}\n                  <Link href=\"/chat\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\">\n                      <MessageSquare className=\"w-4 h-4 mr-2\" />\n                      Chat\n                    </Button>\n                  </Link>\n                  <Link href=\"/templates\" onClick={() => setIsMobileMenuOpen(false)}>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\">\n                      <Database className=\"w-4 h-4 mr-2\" />\n                      Templates\n                    </Button>\n                  </Link>\n                  {user?.subscriptionStatus === 'free' && (\n                    <Link href=\"/subscribe\" onClick={() => setIsMobileMenuOpen(false)}>\n                      <Button variant=\"ghost\" className=\"w-full justify-start\">\n                        <CreditCard className=\"w-4 h-4 mr-2\" />\n                        Upgrade to Pro\n                      </Button>\n                    </Link>\n                  )}\n                  \n                  <div className=\"pt-4 border-t border-border\">\n                    <Button \n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-destructive\"\n                      onClick={handleSignOut}\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </Button>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <a href=\"#features\" className=\"text-left px-4 py-2 hover:bg-accent rounded-lg transition-colors\">\n                    Features\n                  </a>\n                  <a href=\"#templates\" className=\"text-left px-4 py-2 hover:bg-accent rounded-lg transition-colors\">\n                    Templates\n                  </a>\n                  <a href=\"#pricing\" className=\"text-left px-4 py-2 hover:bg-accent rounded-lg transition-colors\">\n                    Pricing\n                  </a>\n                  <div className=\"pt-4 border-t border-border space-y-2\">\n                    <Button variant=\"outline\" className=\"w-full\" asChild>\n                      <a href=\"/api/login\">Sign In</a>\n                    </Button>\n                    <Button className=\"w-full\" asChild>\n                      <a href=\"/api/login\">Get Started</a>\n                    </Button>\n                  </div>\n                </>\n              )}\n            </div>\n          </SheetContent>\n        </Sheet>\n      </div>\n    </header>\n  );\n}\n","size_bytes":8665},"client/src/components/templates/TemplateCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2 } from \"lucide-react\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface TemplateCardProps {\n  template: {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    icon?: LucideIcon;\n    tags?: string[];\n    color?: string;\n    usageCount?: number;\n  };\n  onUse?: () => void;\n  isLoading?: boolean;\n  selectedTheme?: string;\n}\n\nexport function TemplateCard({ template, onUse, isLoading, selectedTheme }: TemplateCardProps) {\n  const Icon = template.icon;\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow cursor-pointer group h-full flex flex-col\">\n      <CardContent className=\"p-6 flex flex-col h-full\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n            template.color ? `bg-${template.color}/10` : 'bg-primary/10'\n          }`}>\n            {Icon ? (\n              <Icon className={`w-6 h-6 ${template.color ? `text-${template.color}` : 'text-primary'}`} />\n            ) : (\n              <div className=\"w-6 h-6 bg-muted rounded\" />\n            )}\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            {template.category}\n          </Badge>\n        </div>\n        \n        <div className=\"flex-1\">\n          <h3 className=\"text-lg font-semibold mb-2 group-hover:text-primary transition-colors\" data-testid={`text-template-title-${template.id}`}>\n            {template.title}\n          </h3>\n          <p className=\"text-muted-foreground text-sm mb-4 line-clamp-3\">\n            {template.description}\n          </p>\n        </div>\n        \n        {template.tags && template.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {template.tags.slice(0, 3).map((tag, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {template.tags.length > 3 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                +{template.tags.length - 3} more\n              </Badge>\n            )}\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          {template.usageCount !== undefined && (\n            <span className=\"text-xs text-muted-foreground\">\n              Used {template.usageCount} times\n            </span>\n          )}\n          {selectedTheme && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {selectedTheme} theme\n            </Badge>\n          )}\n        </div>\n        \n        {onUse && (\n          <Button \n            onClick={onUse}\n            className=\"w-full mt-4\"\n            disabled={isLoading}\n            data-testid={`button-use-template-${template.id}`}\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              'Use Template'\n            )}\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3279},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/workspace/WorkspacePreview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Database, \n  Table, \n  Calendar, \n  LayoutGrid, \n  List, \n  Eye,\n  Users,\n  Hash,\n  Type,\n  CheckSquare,\n  Calendar as CalendarIcon,\n  Link,\n  TrendingUp\n} from \"lucide-react\";\nimport type { Workspace } from \"@shared/schema\";\n\ninterface WorkspacePreviewProps {\n  workspace: Workspace;\n}\n\ninterface NotionProperty {\n  name: string;\n  type: string;\n  config?: any;\n}\n\ninterface NotionView {\n  name: string;\n  type: string;\n  filters?: any[];\n  sorts?: any[];\n  layout?: string;\n}\n\ninterface NotionDatabase {\n  name: string;\n  description: string;\n  properties: NotionProperty[];\n  views: NotionView[];\n  relations: any[];\n  sampleData: any[];\n}\n\ninterface NotionPage {\n  title: string;\n  content: string;\n  type: string;\n}\n\ninterface WorkspaceSpec {\n  title: string;\n  description: string;\n  databases: NotionDatabase[];\n  pages: NotionPage[];\n  theme: string;\n  layout: string;\n}\n\nconst getPropertyIcon = (type: string) => {\n  switch (type.toLowerCase()) {\n    case 'title':\n    case 'rich_text':\n      return Type;\n    case 'number':\n      return Hash;\n    case 'checkbox':\n      return CheckSquare;\n    case 'date':\n      return CalendarIcon;\n    case 'relation':\n      return Link;\n    case 'formula':\n    case 'rollup':\n      return TrendingUp;\n    case 'people':\n      return Users;\n    default:\n      return Database;\n  }\n};\n\nconst getViewIcon = (type: string) => {\n  switch (type.toLowerCase()) {\n    case 'table':\n      return Table;\n    case 'board':\n    case 'kanban':\n      return LayoutGrid;\n    case 'calendar':\n      return Calendar;\n    case 'gallery':\n      return LayoutGrid;\n    case 'list':\n      return List;\n    case 'timeline':\n      return Calendar;\n    default:\n      return Eye;\n  }\n};\n\nexport function WorkspacePreview({ workspace }: WorkspacePreviewProps) {\n  if (!workspace.aiResponse) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">No workspace data available</p>\n      </div>\n    );\n  }\n\n  const spec = workspace.aiResponse as WorkspaceSpec;\n\n  return (\n    <ScrollArea className=\"h-[500px]\">\n      <div className=\"space-y-6\">\n        {/* Workspace Overview */}\n        <div>\n          <h3 className=\"font-semibold text-lg mb-2\" data-testid=\"text-workspace-title\">\n            {spec.title}\n          </h3>\n          <p className=\"text-muted-foreground text-sm mb-3\">{spec.description}</p>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\">{spec.theme}</Badge>\n            <Badge variant=\"outline\">{spec.layout}</Badge>\n          </div>\n        </div>\n\n        {/* Databases */}\n        {spec.databases && spec.databases.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center space-x-2\">\n              <Database className=\"w-4 h-4\" />\n              <span>Databases ({spec.databases.length})</span>\n            </h4>\n            <div className=\"space-y-4\">\n              {spec.databases.map((database, index) => (\n                <Card key={index}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-base\" data-testid={`text-database-title-${index}`}>\n                      {database.name}\n                    </CardTitle>\n                    {database.description && (\n                      <p className=\"text-sm text-muted-foreground\">{database.description}</p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Properties */}\n                    <div>\n                      <h5 className=\"font-medium text-sm mb-2\">Properties ({database.properties?.length || 0})</h5>\n                      <div className=\"grid grid-cols-1 gap-2\">\n                        {database.properties?.slice(0, 6).map((property, propIndex) => {\n                          const Icon = getPropertyIcon(property.type);\n                          return (\n                            <div key={propIndex} className=\"flex items-center space-x-2 text-sm\">\n                              <Icon className=\"w-3 h-3 text-muted-foreground\" />\n                              <span className=\"font-medium\">{property.name}</span>\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {property.type}\n                              </Badge>\n                            </div>\n                          );\n                        })}\n                        {database.properties && database.properties.length > 6 && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            +{database.properties.length - 6} more properties\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Views */}\n                    {database.views && database.views.length > 0 && (\n                      <div>\n                        <h5 className=\"font-medium text-sm mb-2\">Views ({database.views.length})</h5>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {database.views.map((view, viewIndex) => {\n                            const Icon = getViewIcon(view.type);\n                            return (\n                              <div key={viewIndex} className=\"flex items-center space-x-1 bg-muted/50 rounded px-2 py-1\">\n                                <Icon className=\"w-3 h-3\" />\n                                <span className=\"text-xs\">{view.name}</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {view.type}\n                                </Badge>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Relations */}\n                    {database.relations && database.relations.length > 0 && (\n                      <div>\n                        <h5 className=\"font-medium text-sm mb-2\">Relations ({database.relations.length})</h5>\n                        <div className=\"space-y-1\">\n                          {database.relations.map((relation, relIndex) => (\n                            <div key={relIndex} className=\"text-xs text-muted-foreground flex items-center space-x-2\">\n                              <Link className=\"w-3 h-3\" />\n                              <span>{relation.property} → {relation.relatedDatabase}</span>\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {relation.type}\n                              </Badge>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Sample Data Count */}\n                    {database.sampleData && database.sampleData.length > 0 && (\n                      <div className=\"text-xs text-muted-foreground\">\n                        Includes {database.sampleData.length} sample {database.sampleData.length === 1 ? 'record' : 'records'}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Pages */}\n        {spec.pages && spec.pages.length > 0 && (\n          <div>\n            <h4 className=\"font-semibold mb-3 flex items-center space-x-2\">\n              <Type className=\"w-4 h-4\" />\n              <span>Pages ({spec.pages.length})</span>\n            </h4>\n            <div className=\"space-y-2\">\n              {spec.pages.map((page, index) => (\n                <Card key={index}>\n                  <CardContent className=\"p-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h5 className=\"font-medium text-sm\">{page.title}</h5>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {(page.content || '').length > 100 \n                            ? `${(page.content || '').substring(0, 100)}...` \n                            : page.content || 'No content'\n                          }\n                        </p>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {page.type}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Summary Stats */}\n        <Card className=\"bg-muted/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-lg font-bold\">{spec.databases?.length || 0}</div>\n                <div className=\"text-xs text-muted-foreground\">Databases</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold\">\n                  {spec.databases?.reduce((total, db) => total + (db.properties?.length || 0), 0) || 0}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Properties</div>\n              </div>\n              <div>\n                <div className=\"text-lg font-bold\">\n                  {spec.databases?.reduce((total, db) => total + (db.views?.length || 0), 0) || 0}\n                </div>\n                <div className=\"text-xs text-muted-foreground\">Views</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </ScrollArea>\n  );\n}\n","size_bytes":9922}},"version":1}